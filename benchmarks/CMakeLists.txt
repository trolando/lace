macro(set_compilation_settings NAME)
    target_include_directories(${NAME} PRIVATE ${CMAKE_CURRENT_LIST_DIR})
    set_property(TARGET ${NAME} PROPERTY C_STANDARD 11 CXX_STANDARD 11)
    target_compile_features(${NAME} PRIVATE c_std_11 cxx_std_11)
    target_compile_options(${NAME} PRIVATE -Wall -Wextra -Werror -Wno-deprecated)
    if (CMAKE_BUILD_TYPE STREQUAL "Release")
        # set_property(TARGET ${NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
        target_compile_options(${NAME} PRIVATE -flto)
        target_link_options(${NAME} PRIVATE -flto)
    endif ()
    target_link_libraries(${NAME} PRIVATE m)
endmacro(set_compilation_settings)

macro(add_lace_benchmark NAME)
    add_executable(${NAME} ${ARGN})
    target_link_libraries(${NAME} PRIVATE lace::lace)
    target_link_libraries(${NAME} PRIVATE pthread)
    set_compilation_settings(${NAME})
endmacro(add_lace_benchmark)

macro(add_lace14_benchmark NAME)
    add_executable(${NAME} ${ARGN})
    target_link_libraries(${NAME} PRIVATE lace::lace14)
    target_link_libraries(${NAME} PRIVATE pthread)
    set_compilation_settings(${NAME})
endmacro(add_lace14_benchmark)

macro(add_seq_benchmark NAME)
    add_executable(${NAME} ${ARGN})
    if (WIN32)
        target_link_libraries(${NAME} PRIVATE pthread) # for Windows compatibility :(
    endif (WIN32)
    set_compilation_settings(${NAME})
endmacro(add_seq_benchmark)

set(uts_sources uts/rng/brg_sha1.c uts/rng/brg_sha1.h uts/uts.c)

add_seq_benchmark(fib-seq fib/fib-seq.c)
add_seq_benchmark(fib-seq2 fib/fib-seq2.c)
add_seq_benchmark(cholesky-seq cholesky/cholesky.c)
add_seq_benchmark(integrate-seq integrate/integrate.c)
add_seq_benchmark(heat-seq heat/heat.c)
add_seq_benchmark(pi-seq pi/pi-seq.c)
add_seq_benchmark(pi-seq2 pi/pi-seq2.c)
add_seq_benchmark(uts-seq ${uts_sources} uts/uts-seq.c)
set_target_properties(uts-seq PROPERTIES COMPILE_DEFINITIONS "BRG_C99_TYPES;BRG_RNG")
add_seq_benchmark(nqueens-seq nqueens/nqueens-seq.c)
add_seq_benchmark(matmul-seq matmul/matmul-seq.c)
add_seq_benchmark(cilksort-seq cilksort/cilksort-seq.c)
add_seq_benchmark(dfs-seq dfs/dfs-seq.c)

add_lace_benchmark(fib-lace fib/fib-lace.c)
add_lace_benchmark(fib-lace-cpp fib/fib-lace.cpp)
add_lace_benchmark(cholesky-lace cholesky/cholesky-lace.c)
add_lace_benchmark(integrate-lace integrate/integrate-lace.c)
add_lace_benchmark(heat-lace heat/heat-lace.c)
add_lace_benchmark(pi-lace pi/pi-lace.c)
add_lace_benchmark(uts2-lace ${uts_sources} uts/uts2-lace.c)
add_lace_benchmark(uts-lace ${uts_sources} uts/uts-lace.c)
set_target_properties(uts2-lace PROPERTIES COMPILE_DEFINITIONS "BRG_C99_TYPES;BRG_RNG")
set_target_properties(uts-lace PROPERTIES COMPILE_DEFINITIONS "BRG_C99_TYPES;BRG_RNG")
add_lace_benchmark(nqueens-lace nqueens/nqueens-lace.c)
add_lace14_benchmark(matmul-lace matmul/matmul-lace.c)
add_lace_benchmark(knapsack-lace knapsack/knapsack-lace.c)
add_lace14_benchmark(strassen-lace strassen/strassen-lace.c)
add_lace_benchmark(cilksort-lace cilksort/cilksort-lace.c)
add_lace_benchmark(dfs-lace dfs/dfs-lace.c)

file(COPY bench.py DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
