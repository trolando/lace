cmake_minimum_required(VERSION 2.8)
project(lace C)

option(USE_HWLOC "Use HWLOC" ON)
option(PIE_TIMES "Record Pie Times" OFF)
option(COUNT_TASKS "Count Tasks in Lace" OFF)
option(COUNT_STEALS "Count Steals and Leaps in Lace" OFF)
option(COUNT_SPLITS "Count Splits in Lace" OFF)

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_BINARY_DIR}")

function(laceGenerateHeader taskParameter)
	if (taskParameter LESS 2)
		set(taskParameter 2)
	endif()
	
	set(resultString "")
	set(MACRO_ARGS "")
	set(DECL_ARGS "")
	set(TASK_FIELDS "")
	set(TASK_INIT "")
	set(TASK_GET_FROM_t "")
	set(CALL_ARGS "")
	set(FUN_ARGS "")
	set(WORK_ARGS "")
  
	# Read the template string from file
	FILE(READ "lace.h.macro_decl.in" laceHeaderMacroDeclTemplate)
	FILE(READ "lace.h.macro_impl.in" laceHeaderMacroImplTemplate)
	
	# Add trailing backslashed to make the multi-line macros stick together
	string(REGEX REPLACE "\n" "\\\\\\n" laceHeaderMacroDeclTemplate "${laceHeaderMacroDeclTemplate}")
	string(REGEX REPLACE "\n" "\\\\\\n" laceHeaderMacroImplTemplate "${laceHeaderMacroImplTemplate}")
  
	#
	# Create macros for each arity
	#
	foreach(r RANGE 0 ${taskParameter})
		if (r GREATER 0)
			set(MACRO_ARGS "${MACRO_ARGS}, ATYPE_${r}, ARG_${r}")
			set(DECL_ARGS "${DECL_ARGS}, ATYPE_${r}")
			set(TASK_FIELDS "${TASK_FIELDS} ATYPE_${r} arg_${r};")
			set(TASK_INIT "${TASK_INIT} t->d.args.arg_${r} = arg_${r};")
			set(TASK_GET_FROM_t "${TASK_GET_FROM_t}, t->d.args.arg_${r}")
			set(CALL_ARGS "${CALL_ARGS}, arg_${r}")
			set(FUN_ARGS "${FUN_ARGS}, ATYPE_${r} arg_${r}")
			set(WORK_ARGS "${WORK_ARGS}, ATYPE_${r} ARG_${r}")
		endif()
		set(resultString "${resultString}\n\n// Task macros for tasks of arity ${r}\n")
		
		# Create a void and a non-void version
		foreach (isvoid RANGE 0 1)
			if (isvoid EQUAL 0)
				set(DEF_MACRO "#define TASK_${r}(RTYPE, NAME${MACRO_ARGS}) TASK_DECL_${r}(RTYPE, NAME${DECL_ARGS}) TASK_IMPL_${r}(RTYPE, NAME${MACRO_ARGS})")
				set(DECL_MACRO "#define TASK_DECL_${r}(RTYPE, NAME${DECL_ARGS})")
				set(IMPL_MACRO "#define TASK_IMPL_${r}(RTYPE, NAME${MACRO_ARGS})")
				set(RTYPE "RTYPE")
				set(RES_FIELD "${RTYPE} res;")
				set(SAVE_RVAL "t->d.res =")
				set(RETURN_RES "((TD_##NAME *)t)->d.res")
			else()
				set(DEF_MACRO "#define VOID_TASK_${r}(NAME${MACRO_ARGS}) VOID_TASK_DECL_${r}(NAME${DECL_ARGS}) VOID_TASK_IMPL_${r}(NAME${MACRO_ARGS})")
				set(DECL_MACRO "#define VOID_TASK_DECL_${r}(NAME${DECL_ARGS})")
				set(IMPL_MACRO "#define VOID_TASK_IMPL_${r}(NAME${MACRO_ARGS})")
				set(RTYPE "void")
				set(RES_FIELD "")
				set(SAVE_RVAL "")
				set(RETURN_RES "")
			endif()
			
			# Write down the macro for the task declaration
			string(CONFIGURE "${laceHeaderMacroDeclTemplate}" macroDeclTemplateConfigured)
			string(CONFIGURE "${laceHeaderMacroImplTemplate}" macroImplTemplateConfigured)
			set(resultString "${resultString}\n${macroDeclTemplateConfigured}\n${macroImplTemplateConfigured}\n${DEF_MACRO}\n")
		endforeach()
	endforeach()
	set(resultString "${resultString}\n\nVOID_TASK_DECL_0(lace_steal_random);\nVOID_TASK_DECL_1(lace_steal_random_loop, int*);\nVOID_TASK_DECL_1(lace_steal_loop, int*);\nVOID_TASK_DECL_2(lace_steal_loop_root, Task *, int*);\n\n#ifdef __cplusplus\n}\n#endif /* __cplusplus */\n\n#endif")
	# "laceGenerateHeaderResultString" is automatically inserted into the lace.h.in files when generating them.
	set(laceGenerateHeaderResultString "${resultString}" PARENT_SCOPE)
endfunction()

if(USE_HWLOC)
	find_path(HWLOC_INCLUDE_DIR hwloc.h HINTS ${HWLOC_ROOT} ENV HWLOC_ROOT PATH_SUFFIXES include)
	find_library(HWLOC_LIBRARY NAMES hwloc libhwloc HINTS ${HWLOC_ROOT} ENV HWLOC_ROOT PATH_SUFFIXES lib lib64)
	mark_as_advanced(HWLOC_ROOT HWLOC_LIBRARY HWLOC_INCLUDE_DIR)
  
	if (HWLOC_INCLUDE_DIR AND HWLOC_LIBRARY)
		set(HAVE_HWLOC_H TRUE)
		include_directories(${HWLOC_INCLUDE_DIR})
		set (HWLOC_LIB "${HWLOC_LIBRARY}")
		set (HWLOC_DEF "USE_HWLOC=1")
	else()
		set(HAVE_HWLOC_H FALSE)
		message("No HWLOC library found!")
		set (HWLOC_DEF "USE_HWLOC=0")
	endif()
else()
  set (HWLOC_DEF "USE_HWLOC=0")
endif()

if(PIE_TIMES)
	set (LACE_PIE "LACE_PIE_TIMES=1")
else()
	set (LACE_PIE "LACE_PIE_TIMES=0")
endif()

if (COUNT_TASKS)
	set (LACE_COUNT_TASKS "LACE_COUNT_TASKS=1")
else()
	set (LACE_COUNT_TASKS "LACE_COUNT_TASKS=0")
endif()

if (COUNT_STEALS)
	set (LACE_COUNT_STEALS "LACE_COUNT_STEALS=1")
else()
	set (LACE_COUNT_STEALS "LACE_COUNT_STEALS=0")
endif()

if (COUNT_SPLITS)
	set (LACE_COUNT_SPLITS "LACE_COUNT_SPLITS=1")
else()
	set (LACE_COUNT_SPLITS "LACE_COUNT_SPLITS=0")
endif()

foreach (LACE_TASKPARAMETER RANGE 1 8)
	laceGenerateHeader(${LACE_TASKPARAMETER})
	# here, "laceGenerateHeaderResultString" is inserted into the header files
	configure_file (
		"${PROJECT_SOURCE_DIR}/lace.h.in"
		"${PROJECT_BINARY_DIR}/lace-${LACE_TASKPARAMETER}.h"
	)
	configure_file (
		"${PROJECT_SOURCE_DIR}/lace.c.in"
		"${PROJECT_BINARY_DIR}/lace-${LACE_TASKPARAMETER}.c"
	)
endforeach()

if(CMAKE_COMPILER_IS_GNUCC)
    set(CMAKE_C_FLAGS "-g -O3 -Wall -Wextra")
	add_definitions("-D${HWLOC_DEF}")
	add_definitions("-D${LACE_PIE}")
	add_definitions("-D${LACE_COUNT_TASKS}")
	add_definitions("-D${LACE_COUNT_STEALS}")
	add_definitions("-D${LACE_COUNT_SPLITS}")
	
	set(PTHREAD_LIB "pthread")
	set(LACE_ADDITIONAL_SOURCES "")
elseif(MSVC)
    add_definitions("/D${HWLOC_DEF}")
	add_definitions("/D${LACE_PIE}")
	add_definitions("/D${LACE_COUNT_TASKS}")
	add_definitions("/D${LACE_COUNT_STEALS}")
	add_definitions("/D${LACE_COUNT_SPLITS}")
	
	add_definitions("/DNOGDI /DWIN32_LEAN_AND_MEAN")
	add_definitions("/D_USE_MATH_DEFINES") # to define M_PI
	add_definitions("/D_CRT_RAND_S") # to define rand_s
	add_definitions("/D_CRT_SECURE_NO_WARNINGS") # to silcence "use foo_s instead of foo" warnings
	
	set(LACE_ADDITIONAL_SOURCES "${PROJECT_SOURCE_DIR}/windows/getopt.h" "${PROJECT_SOURCE_DIR}/windows/windows_helper.h" "${PROJECT_SOURCE_DIR}/windows/windows_helper.c" "${PROJECT_SOURCE_DIR}/windows/winpthreads.h")
	# this adds the CMakeLists.txt project in the windows/ folder, which defines the getopt library replacement for windows.
	add_subdirectory("${PROJECT_SOURCE_DIR}/windows")
	set(PTHREAD_LIB "")
else(CLANG)
    set(CMAKE_C_FLAGS "-g -O3 -Wall -Wextra")
	add_definitions("-D${HWLOC_DEF}")
	add_definitions("-D${LACE_PIE}")
	add_definitions("-D${LACE_COUNT_TASKS}")
	add_definitions("-D${LACE_COUNT_STEALS}")
	add_definitions("-D${LACE_COUNT_SPLITS}")
	
	set(PTHREAD_LIB "pthread")
	set(LACE_ADDITIONAL_SOURCES "")
endif()

add_subdirectory(config)

set(uts_sources benchmarks/uts/rng/brg_sha1.c benchmarks/uts/rng/brg_sha1.h benchmarks/uts/uts.c)

add_executable(fib-seq benchmarks/fib/fib-seq.c ${LACE_ADDITIONAL_SOURCES})
if (UNIX)
	target_link_libraries(fib-seq m)
endif()

add_executable(fib-seq2 benchmarks/fib/fib-seq2.c ${LACE_ADDITIONAL_SOURCES})
if (UNIX)
	target_link_libraries(fib-seq2 m)
endif()

add_executable(fib-lace benchmarks/fib/fib-lace.c "${PROJECT_BINARY_DIR}/lace-1.c" lace-1.h ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(fib-lace getopt)
endif()
target_link_libraries(fib-lace ${PTHREAD_LIB} ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(fib-lace m)
endif()

# add_executable(fib-lace-prof benchmarks/fib/fib-lace.c lace-1.c lace-1.h)
# set_target_properties(fib-lace-prof PROPERTIES COMPILE_FLAGS "-I. -g -fno-inline")
# set_target_properties(fib-lace-prof PROPERTIES COMPILE_DEFINITIONS "${lace_flags}")
# target_link_libraries(fib-lace-prof ${PTHREAD_LIB} m profiler ${HWLOC_LIB})

add_executable(pi-lace benchmarks/pi/pi-lace.c "${PROJECT_BINARY_DIR}/lace-2.c" lace-2.h ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(pi-lace getopt)
endif()
target_link_libraries(pi-lace ${PTHREAD_LIB} ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(pi-lace m)
endif()

add_executable(pi-seq benchmarks/pi/pi-seq.c ${LACE_ADDITIONAL_SOURCES})
target_link_libraries(pi-seq ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(pi-seq m)
endif()

add_executable(pi-seq2 benchmarks/pi/pi-seq2.c ${LACE_ADDITIONAL_SOURCES})
target_link_libraries(pi-seq2 ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(pi-seq2 m)
endif()

add_executable(uts-seq ${uts_sources} benchmarks/uts/uts-seq.c ${LACE_ADDITIONAL_SOURCES})
set_target_properties(uts-seq PROPERTIES COMPILE_DEFINITIONS "BRG_C99_TYPES;BRG_RNG")
target_link_libraries(uts-seq ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(uts-seq m)
endif()

add_executable(uts2-lace ${uts_sources} benchmarks/uts/uts2-lace.c "${PROJECT_BINARY_DIR}/lace-2.c" lace-2.h ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(uts2-lace getopt)
endif()
set_target_properties(uts2-lace PROPERTIES COMPILE_FLAGS "-I.")
set_target_properties(uts2-lace PROPERTIES COMPILE_DEFINITIONS "BRG_C99_TYPES;BRG_RNG")
target_link_libraries(uts2-lace ${PTHREAD_LIB} ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(uts2-lace m)
endif()

add_executable(uts-lace ${uts_sources} benchmarks/uts/uts-lace.c "${PROJECT_BINARY_DIR}/lace-2.c" lace-2.h ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(uts-lace getopt)
endif()
set_target_properties(uts-lace PROPERTIES COMPILE_FLAGS "-I.")
set_target_properties(uts-lace PROPERTIES COMPILE_DEFINITIONS "BRG_C99_TYPES;BRG_RNG")
target_link_libraries(uts-lace ${PTHREAD_LIB} ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(uts-lace m)
endif()

# add_executable(uts-lace-prof ${uts_sources} benchmarks/uts/uts-lace.c lace-2.c lace-2.h)
# set_target_properties(uts-lace-prof PROPERTIES COMPILE_FLAGS "-I. -g -fno-inline")
# set_target_properties(uts-lace-prof PROPERTIES COMPILE_DEFINITIONS "${lace_flags};BRG_C99_TYPES;BRG_RNG")
# target_link_libraries(uts-lace-prof m ${PTHREAD_LIB} profiler ${HWLOC_LIB})

add_executable(queens-lace benchmarks/queens/queens-lace.c "${PROJECT_BINARY_DIR}/lace-3.c" lace-3.h ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(queens-lace getopt)
endif()
target_link_libraries(queens-lace ${PTHREAD_LIB} ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(queens-lace m)
endif()

# add_executable(queens-lace-prof benchmarks/queens/queens-lace.c lace-3.c lace-3.h)
# set_target_properties(queens-lace-prof PROPERTIES COMPILE_FLAGS "-I. -g -fno-inline")
# set_target_properties(queens-lace-prof PROPERTIES COMPILE_DEFINITIONS "${lace_flags}")
# target_link_libraries(queens-lace-prof ${PTHREAD_LIB} m profiler ${HWLOC_LIB})

add_executable(queens-seq benchmarks/queens/queens-seq.c ${LACE_ADDITIONAL_SOURCES})
if (UNIX)
	target_link_libraries(queens-seq m)
endif()

add_executable(matmul-lace benchmarks/matmul/matmul-lace.c "${PROJECT_BINARY_DIR}/lace-8.c" lace-8.h ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(matmul-lace getopt)
endif()
target_link_libraries(matmul-lace ${PTHREAD_LIB} ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(matmul-lace m)
endif()

add_executable(matmul-seq benchmarks/matmul/matmul-seq.c ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(matmul-seq getopt)
endif()
if (UNIX)
	target_link_libraries(matmul-seq m)
endif()

#add_executable(matmul-lace-prof benchmarks/matmul/matmul-lace.c lace-8.c lace-8.h)
#set_target_properties(matmul-lace-prof PROPERTIES COMPILE_FLAGS "-I. -g -fno-inline")
#set_target_properties(matmul-lace-prof PROPERTIES COMPILE_DEFINITIONS "${lace_flags}")
#target_link_libraries(matmul-lace-prof ${PTHREAD_LIB} m profiler ${HWLOC_LIB})

add_executable(knapsack-lace benchmarks/knapsack/knapsack-lace.c "${PROJECT_BINARY_DIR}/lace-4.c" lace-4.h ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(knapsack-lace getopt)
endif()
target_link_libraries(knapsack-lace ${PTHREAD_LIB} ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(knapsack-lace m)
endif()

add_executable(strassen-lace benchmarks/strassen/strassen-lace.c "${PROJECT_BINARY_DIR}/lace-7.c" lace-7.h ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(strassen-lace getopt)
endif()
target_link_libraries(strassen-lace ${PTHREAD_LIB} ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(strassen-lace m)
endif()

#add_executable(strassen-lace-prof benchmarks/strassen/strassen-lace.c lace-7.c lace-7.h)
#set_target_properties(strassen-lace-prof PROPERTIES COMPILE_FLAGS "-I. -g -fno-inline")
#set_target_properties(strassen-lace-prof PROPERTIES COMPILE_DEFINITIONS "${lace_flags}")
#target_link_libraries(strassen-lace-prof ${PTHREAD_LIB} m profiler  ${HWLOC_LIB})

add_executable(cilksort-lace benchmarks/cilksort/cilksort-lace.c "${PROJECT_BINARY_DIR}/lace-5.c" lace-5.h ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(cilksort-lace getopt)
endif()
target_link_libraries(cilksort-lace ${PTHREAD_LIB} ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(cilksort-lace m)
endif()

add_executable(cilksort-seq benchmarks/cilksort/cilksort-seq.c ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(cilksort-seq getopt)
endif()
if (UNIX)
	target_link_libraries(cilksort-seq m)
endif()

#add_executable(cilksort-lace-prof benchmarks/cilksort/cilksort-lace.c lace-5.c lace-5.h)
#set_target_properties(cilksort-lace-prof PROPERTIES COMPILE_FLAGS "-I. -g -fno-inline")
#set_target_properties(cilksort-lace-prof PROPERTIES COMPILE_DEFINITIONS "${lace_flags}")
#target_link_libraries(cilksort-lace-prof ${PTHREAD_LIB} m profiler ${HWLOC_LIB})

add_executable(dfs-lace benchmarks/dfs/dfs-lace.c "${PROJECT_BINARY_DIR}/lace-1.c" lace-1.h ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(dfs-lace getopt)
endif()
target_link_libraries(dfs-lace ${PTHREAD_LIB} ${HWLOC_LIB})
if (UNIX)
	target_link_libraries(dfs-lace m)
endif()

add_executable(dfs-seq benchmarks/dfs/dfs-seq.c ${LACE_ADDITIONAL_SOURCES})
if (MSVC)
	target_link_libraries(dfs-seq getopt)
endif()
if (UNIX)
	target_link_libraries(dfs-seq m)
endif()
